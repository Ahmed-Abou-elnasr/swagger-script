<put the new endpoint path here as per the swagger, same as swagger, no changes>:
  <here put the endpoint http method e.g. get, post or put - Make sure all lowercase letter>:
    operationId: "<put the operation id for the endpoint same as swagger>"
    parameters:
      - name: "x-trace-id"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "Content-Type"
        in: "header"
        schema:
          type: "string"
      - name: "Accept-Language"
        in: "header"
        schema:
          type: "string"
      - name: "User-Agent"
        in: "header"
        schema:
          type: "string"
      - name: "Authorization"
        in: "header"
        required: true
        schema:
          type: "string"
      - name: "cookie"
        in: "header"
        schema:
          type: "string"
      - name: "x-forward-for"
        in: "header"
        schema:
          type: "string"
      - name: "<if any, add the query parameter name here and replicate this parameter entry for as many parameters the endpoint have>"
        in: "query"
        required: true # Optional, remove if the query string is not required.
        schema:
          type: "<query parameter type e.g. string or integer>"
    requestBody: #optional remove the requestBody if the endpoint has no request body.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/<Put the name of the resource defined in $root.components.schemas that maps the endpoint request body>"
      required: true
    responses:
      "404":
        description: "404 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseHeader"
      "200":
        description: "200 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content: #Optional remove content section if the endpoint has no response body.
           application/json:
             schema:
               $ref: "#/components/schemas/<Put the name of the resource defined in $root.components.schemas that maps the endpoint response body>"
      "400":
        description: "400 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseHeader"
      "401":
        description: "401 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseHeader"
      "500":
        description: "500 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseHeader"
      "403":
        description: "403 response"
        headers:
          x-trace-id:
            schema:
              type: "string"
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseHeader"
    security:
      - api_key: [ ]
    x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
        \ and headers"
    x-amazon-apigateway-integration:
      connectionId: "<Put the vpc connection ID here as per the stage used>"
      httpMethod: "<here put the endpoint http method e.g. GET, POST or PUT - Make sure all uppercase letters>"
      uri: "https://${stageVariables.url}/<put the backend API URL here>"
      responses:
        ^200$:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
          responseTemplates: # Optional remove the responseTemplates if the endpoint has a response body, if the response body is emptyResponse, leave this section.
            application/json: "#set($inputRoot = $input.path('$'))"
        ^500$:
          statusCode: "500"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
        ^400$:
          statusCode: "400"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
        ^401$|^302$:
          statusCode: "401"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
        ^404$:
          statusCode: "404"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
        ^403$:
          statusCode: "403"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
      requestParameters:
        integration.request.header.Content-Type: "method.request.header.Content-Type"
        integration.request.header.x-forward-for: "method.request.header.x-forward-for"
        integration.request.header.x-trace-id: "method.request.header.x-trace-id"
        integration.request.header.cookie: "method.request.header.cookie"
        integration.request.header.Accept-Language: "method.request.header.Accept-Language"
        integration.request.header.Authorization: "method.request.header.Authorization"
        integration.request.header.User-Agent: "method.request.header.User-Agent"
        # optional - if there are any path parameters, you can define a mapping for each as example below.
        integration.request.path.<Path parameter field name>: "method.request.path.<Path parameter field name>"
        # optional - if there are any query strings, you can define a mapping for each as example below.
        integration.request.querystring.<Query string field name>: "method.request.querystring.<Query string field name>"
      connectionType: "VPC_LINK"
      passthroughBehavior: "when_no_templates"
      type: "http"
  options:
    parameters:
      - <Add path parameters here if any, remove if none>
    responses:
      "200":
        description: "200 response"
        headers:
          Access-Control-Allow-Origin:
            schema:
              type: "string"
          Access-Control-Allow-Methods:
            schema:
              type: "string"
          Access-Control-Allow-Credentials:
            schema:
              type: "string"
          Access-Control-Allow-Headers:
            schema:
              type: "string"
        content: { }
    x-amazon-apigateway-integration:
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Credentials: "'true'"
            method.response.header.Access-Control-Allow-Methods: "'<put the http method here upper case>,OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'x-trace-id,x-api-key,Authorization,Cache-Control,Content-Type'"
            method.response.header.Access-Control-Allow-Origin: "'<put the front end-url here as per stage>'"
      requestTemplates:
        application/json: "{\"statusCode\": 200}"
      passthroughBehavior: "when_no_match"
      type: "mock"